package com.itdom;

/**
 * public void setTcpNoDelay(boolean on）方法的作用是启用／禁用TCP NODELAY （启用／
 * 禁用Nagle 算法） 。参数为true ，表示启用TCP_NODELAY ；参数为fal se ，表示禁用。
 * public boolean getTcpNoDelay（）方法的作用是测试是否启用TCP_NODELAY 。返回值
 * 为是否启用TCP_NODELAY 的boo l ean 值。
 * 1. Nagle 算法简介
 * Socket 选项TCP_NODELAY 与Nagle 算法有关。什么是Nagle 算法？ Nagle 算法是以它的
 * 发明人John Nagle 的名字命名的，该算法可以将许多要发送的数据进行本地缓存（这一过程称为
 * nagling），以减少发送数据包的个数来提高网络软件运行的效率，这就是N唔le 算法被发明的初衷。
 * Nagle 算法最早出现在1 984 年的福特航空和通信公司，是解决TCP/IP 拥塞控制的方
 * 法。这个算法在当时将福特航空和通信公司的网络拥塞得到了控制，从那以后这一算法得到
 * 了广泛应用。
 * Nagle 算法解决了处理小数据包众多而造成的网络拥塞。网络拥塞的发生是指如果应用
 * 程序l 次产生1 个字节的数据，并且高频率地将它发送给对方网络，那么就会出现严重的网
 * 络拥塞。为什么只发送1 个字节的数据就会出现这么严重的网络拥塞呢？这是因为在网络中
 * 将产生1 个41 字节的数据包，而不是1 个字节的数据包，这4 1 字节的数据包中包括l 字节
 * 的用户数据以及40 字节的TCP/IP 协议头，这样的情况对于轻负载的网络来说还是可以接
 * 受的，但是在重负载的福特网络就受不了了，网络拥塞就发生了。
 * Nagl e 算法的原理是在未确认ACK 之前让发送器把数据送到缓存里，后面的数据也继
 * 续放入缓存中，直到得到确认ACK 或者直到“攒到”了一定大小（ size ）的数据再发送。尽
 * 管Nag l e 算法解决的问题只是局限于福特网络， 然而同样的问题也可能出现在互联网上，因
 * 此，这个算法在互联网中也得到了广泛推广。
 * 先来看看不使用Nagle 算法时，数据是如何传输的，过程如图4- 57 所示。
 * 客户端向服务端传输很多小的数据包，造成了网络的拥塞，而使用Nagle 算法后不再出
 * 现拥塞了。使用Nagle 算法的数据传输过程是怎样的呢？其过程如图4- 58 所示。
 * 使用Nagl e 算法的数据传输过程是在第一个ACK 确认之前，将要发送的数据放人缓存
 * 中，接收到ACK 之后再发送一个大的数据包，以提升网络传输利用率。举个例子，客户端
 * 调用Socket 的写操作将一个int 型数据123456789 （称为A 块）写人到网络中，由于此时连
 * 接是空闲的（也就是说，还没有未被确认的小段），因此这个int 类型的数据就会被马上发
 * 送到服务端。接着，客户端又调用写操作写入“ ＼r\n ”（简称B 块），这个时候，因为A 块的
 * ACK 没有返回，所以可以认为A 块是一个未被确认的小段，这时B 块在没有收到ACK 之
 * 前是不会立即被发送到服务端的，一直等到A 块的ACK 收到（大概40ms 之后）， B 块才被
 * 请求的流程可以查看图images/nagle.png
 *
 *
 *如果采用Nagl e 算法，那么一个数据包要“攒到”多大才将数据进行发送呢？要“攒
 * 到” MSS 大小才发送！什么是MSS 呢？ MSS (Maximum Segment Size ）即最大报文段长
 * 度。在TCP/IP 中，无论发送多少数据，总是要在数据前面加上协议头， 同时，对方接收到
 * 数据，也需要发送回ACK 以表示确认。为了尽可能地利用网络带宽， TCP 总是希望尽可能
 * 一次发送足够大的数据，此时就可以使用MSS 来进行设置。MSS 选项是TCP/IP 定义的一
 * 个选项， 该选项用于在TCP/IP 连接建立时， 收发双方协商通信时每一个报文段所能承载的
 * 最大数据长度，它的计算方式如下：
 * MSS = MTU - 20 字节的TCP 报头－ 20 字节的IP 报头
 *
 *在以太网环境下， MSS 值一般就是1500 - 20 - 20 = 1460 字节。TCP/IP 希望每次都能
 * 够以MSS （最大尺寸）的数据块来发送数据，以增加每次网络传输的数据量。
 * Nagle 算法就是为了尽可能发送大块数据，避免网络中充斥着许多小数据块。Nagle 算
 * 法的基本含义是在任意的时刻，最多只能有一个未被确认的小段。所谓“小段”指的是小
 * 于MSS 的数据块；所谓“未被确认”，是指一个数据块发送出去后，没有收到对方发送的
 * ACK 确认该数据已收到。
 * TCP _NO DEL AY 选项可以控制是否采用Nag le 算法。在默认情况下，发送数据采用的
 * 是Nagle 算法，这样虽然提高了网络吞吐量，但是实时性却降低了，在一些交互性很强的应
 * 用程序中是不允许的。使用TCP_NODELAY 选项可以禁止Nagle 算法。
 * 通过前面的一些知识点的介绍，可以分析出以下两点。
 * 1 ）如果要求高实时性，那么有数据发送时就要马上发送，此时可以将TCP NODELAY
 * 选项设置为true ，也就是屏蔽了Nag le 算法。典型的应用场景就是开发一个网络格斗游戏，
 * 程序设计者希望玩家A 每点击一次按键都会立即在玩家B 的计算机中得以体现，而不是等
 * 到数据包达到最大时才通过网络一次性地发送全部数据，这时就可以屏蔽Nag le 算法，传人
 * 参数true 就达到实时效果了。
 * 2 ） 如果不要求高实时性， 要减少发送次数达到减少网络交互，就将TCP NOD ELAY
 * 设置为false ，等数据包累积一定大小后再发送。
 * Nagle 算法适用于大包、高延迟的场合，而对于要求交互速度的B / S 或C / S 就不合适
 * 了。在Socket 创建的时候，默认都是使用Nag le 算法的，这会导致交互速度严重下降，因
 * 此，需要屏蔽Nag l e 算法。不过，如果取消了Nag l e 算法，就会导致TCP 碎片增多，效率
 * 可能会降低，因此，要根据实际的运行场景进行有效的取舍。
 */
public class TcpNoDelayTest {
    public static void main(String[] args) {
        
    }
}
